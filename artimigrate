#!/bin/bash

set -e

usage() {
    echo "Usage: $0 -s SOURCE_ARTIFACTORY_URL -t TARGET_ARTIFACTORY_URL -kt TARGET_API_KEY -sr SOURCE_REPO -tr TARGET_REPO"
    exit 1
}

while getopts ":s:t:kt:sr:tr:" opt; do
    case ${opt} in
        s)
            SOURCE_ARTIFACTORY_URL=${OPTARG}
            ;;
        t)
            TARGET_ARTIFACTORY_URL=${OPTARG}
            ;;
        kt)
            TARGET_API_KEY=${OPTARG}
            ;;
        sr)
            SOURCE_REPO=${OPTARG}
            ;;
        tr)
            TARGET_REPO=${OPTARG}
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument."
            usage
            ;;
    esac
done

# Validate required options
if [[ -z $SOURCE_ARTIFACTORY_URL || -z $TARGET_ARTIFACTORY_URL || -z $TARGET_REPO ]]; then
    echo "Missing required options!"
    usage
fi

# Function to list all artifacts in a repository
list_artifacts() {
    curl -sS "$SOURCE_ARTIFACTORY_URL/$SOURCE_REPO/" | grep -oP '(?<=href=")[^"]+(?=")'
}

# Function to copy artifacts from source to target repository
copy_artifacts() {
    for artifact in $(list_artifacts); do
        echo "Copying: $artifact"
        artifact_path=$(echo "$artifact" | sed 's#/$##')  # Remove trailing slash, if any
        curl -X COPY -H "Authorization: Bearer $TARGET_API_KEY" "$SOURCE_ARTIFACTORY_URL/$SOURCE_REPO/$artifact_path" -H "Destination: $TARGET_ARTIFACTORY_URL/$TARGET_REPO/$artifact_path"
    done
}

# Main migration function
migrate_artifacts() {
    echo "Migrating artifacts from $SOURCE_ARTIFACTORY_URL/$SOURCE_REPO to $TARGET_ARTIFACTORY_URL/$TARGET_REPO"

    # Create the target repository if it doesn't exist
    curl -X PUT -H "Authorization: Bearer $TARGET_API_KEY" "$TARGET_ARTIFACTORY_URL/api/repositories/$TARGET_REPO"

    # Copy artifacts
    copy_artifacts

    echo "Migration complete!"
}

# Execute the migration
migrate_artifacts
